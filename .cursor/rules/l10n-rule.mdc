---
description: 
globs: *.tsx
alwaysApply: false
---
# Правила работы с переводами в проекте Deadline Mate

## Структура и конфигурация

1. **Библиотека и инструменты**: 
   - Проект использует `next-i18next` для управления переводами
   - Интеграция с Next.js через функцию `appWithTranslation` в файле `_app.tsx`

2. **Структура каталогов переводов**:
   - Файлы переводов расположены в директории `frontend/public/locales`
   - Поддерживаемые языки: русский (`ru`) и английский (`en`)
   - Для каждого языка создана отдельная директория (`/ru`, `/en`)
   - Переводы сгруппированы по функциональным областям в JSON-файлах (сейчас только `common.json`)

3. **Конфигурация i18n**:
   - Файл конфигурации: `next-i18next.config.js`
   - Основные настройки:
     - Русский (`ru`) установлен как язык по умолчанию
     - Автоматическое определение языка отключено (`localeDetection: false`)

## Организация переводов

1. **Структура файлов переводов**:
   - Переводы организованы в иерархическую структуру с помощью вложенных объектов
   - Корневой уровень содержит общие ключи (`appName`, `welcome`, `login` и т.д.)
   - Вложенные объекты группируют переводы по функциональным блокам (`loginPage`, `registerPage`, `dashboard` и т.д.)
   - Дополнительные группировки для общих элементов (`common`, `validation`, `user`, `nav`)

2. **Именование ключей**:
   - Ключи используют camelCase формат
   - Имена ключей осмысленные, отражающие контекст использования
   - Структура вложенности: `[функциональный_блок].[элемент]` (например, `loginPage.username`)
   - Общие переводы размещаются в корне для быстрого доступа

3. **Организация по страницам и компонентам**:
   - Переводы, относящиеся к конкретным страницам, сгруппированы под общим ключом (например, `loginPage`, `registerPage`)
   - Переводы, используемые в компонентах, находятся в соответствующих разделах (`nav`, `dashboard`)
   - Общие тексты интерфейса вынесены в корень для удобства использования

## Использование переводов в коде

1. **Доступ к переводам в компонентах**:
   - Импорт хука `useTranslation` из библиотеки `next-i18next`
   - Получение функции `t` с указанием пространства имён (всегда `'common'`)
   - Использование синтаксиса `t('[ключ]')` для получения перевода

   ```typescript
   const { t } = useTranslation('common');
   // Использование: t('loginPage.username')
   ```

2. **Серверный рендеринг и SSR**:
   - В каждой странице реализована функция `getServerSideProps`
   - Переводы загружаются через функцию `serverSideTranslations` 
   - Стандартный формат:
   ```typescript
   export const getServerSideProps: GetServerSideProps = async ({ locale }) => {
     return {
       props: {
         ...(await serverSideTranslations(locale || 'ru', ['common'])),
       },
     };
   };
   ```

3. **Переключение языков**:
   - Компонент `LanguageToggle` отвечает за смену языка
   - Используется маршрутизация Next.js для переключения локали
   - Изменение языка происходит через `router.push` с параметром `locale`

4. **Форматирование и валидация**:
   - Сообщения валидации сгруппированы под ключом `validation`
   - Все тексты ошибок и сообщений извлекаются через функцию `t()`

## Соглашения и рекомендации

1. **Добавление новых переводов**:
   - Переводы должны быть добавлены сразу для всех поддерживаемых языков
   - Все ключи должны соответствовать существующей иерархии и соглашениям по именованию
   - При добавлении новой функциональности, сначала создавать переводы, затем интегрировать их в код

2. **Поддержка новых языков**:
   - Для добавления нового языка необходимо:
     - Создать новую директорию в `public/locales`
     - Добавить язык в массив `locales` в `next-i18next.config.js`
     - Создать все необходимые файлы переводов для нового языка

3. **Недопустимые практики**:
   - Жёстко закодированные строки в компонентах (все тексты должны использовать переводы)
   - Неполные переводы (все языки должны иметь одинаковый набор ключей)
   - Дублирование ключей переводов
   - Использование неорганизованной структуры ключей

4. **Обработка ошибок**:
   - Проект должен корректно обрабатывать отсутствующие ключи переводов
   - Необходимо обеспечить корректное отображение UI при смене языка
   - При отсутствии перевода, система должна использовать перевод по умолчанию

Этот документ описывает текущий подход к переводам в проекте Deadline Mate и может служить руководством для поддержания консистентности переводов при дальнейшей разработке.
